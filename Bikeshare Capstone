Google Data Analytics Capstone: Complete a Case Study

Case Study One: How Does a Bike-Share Navigate Speedy Success

Basic Conclusion: Casual riders take longer rides, and there is variation through the week

Steps and notes for the Capstone:

Download data from https://divvy-tripdata.s3.amazonaws.com/index.html
Unzip files and explore basic structure in Excel
Upload to Kaggle as a new data set, started new notebook. Doesn't do SQL but does the nice quick summaries.
Not sure how to combine these as one table, go back to the directions
The directions on page six really don't talk about the the handling of multiple files
If you try to do the whole year in Excel, you literally run out of rows. Over a million rows!
Can't upload these to Big Query either. Might just use one month.
Used Excel to pick a random month <=RANDBETWEEN(1,12)>. Picked 8 which might be werid since it has the tourists.
Open your spreadsheet and create a column called “ride_length.” Calculate the length of each ride by subtracting the column “started_at” from the column “ended_at” (for example, =D2-C2) and format as HH:MM:SS using Format > Cells > Time > 37:30:55.
Create a column called “day_of_week,” and calculate the day of the week that each ride started using the “WEEKDAY” command (for example, =WEEKDAY(C2,1)) in each file. Format as general or as a number with no decimals
Looking at some pivot tables to see patterns. Big thing that jumps out to me is that the casual users take longer trips than the members. Did a new column to see if the start location equaled the end location. Round trips are almost twice as long as the one way trips, and all trips are longer on the weekend.
Looks like the R script has info for knitting all the files together!
The fact that the provided script is for quarters and not moths like my data might be a pain.
Working through this is more useful than the markdown documents because I really have to think about the differences with the data and the framework.
Here is the difference between weekday and weekend rides

Difference between weekend and weekday rides

Here is the difference between the length of rides

duration

Here is the script I ran - It points to my working directory and was the last year avaiable as if 4.16.2021 I had to pull it month by month instead of the quarters so there is some adapatation.

### Cyclistic_Exercise_Full_Year_Analysis ###

# This analysis is for case study 1 from the Google Data Analytics Certificate (Cyclistic).  It’s originally based on the case study "'Sophisticated, Clear, and Polished’: Divvy and Data Visualization" written by Kevin Hartman (found here: https://artscience.blog/home/divvy-dataviz-case-study). We will be using the Divvy dataset for the case study. The purpose of this script is to consolidate downloaded Divvy data into a single dataframe and then conduct simple analysis to help answer the key question: “In what ways do members and casual riders use Divvy bikes differently?”

# # # # # # # # # # # # # # # # # # # # # # # 
# Install required packages
# tidyverse for data import and wrangling
# libridate for date functions
# ggplot for visualization
# # # # # # # # # # # # # # # # # # # # # # #  

library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
setwd("/Users/jedga/Desktop/Capstone/Excel_files") #sets your working directory to simplify calls to data ... make sure to use your OWN username instead of mine ;)

#=====================
# STEP 1: COLLECT DATA
#=====================
# Upload Divvy datasets (csv files) here
m1_2021 <- read_csv("202101-divvy-tripdata.csv")
m2_2021 <- read_csv("202102-divvy-tripdata.csv")
m3_2021 <- read_csv("202103-divvy-tripdata.csv")
m4_2020 <- read_csv("202004-divvy-tripdata.csv")
m5_2020 <- read_csv("202005-divvy-tripdata.csv")
m6_2020 <- read_csv("202006-divvy-tripdata.csv")
m7_2020 <- read_csv("202007-divvy-tripdata.csv")
m8_2020 <- read_csv("202008-divvy-tripdata.csv")
m9_2020 <- read_csv("202009-divvy-tripdata.csv")
m10_2020 <- read_csv("202010-divvy-tripdata.csv")
m11_2020 <- read_csv("202011-divvy-tripdata.csv")
M12_2020 <- read_csv("202012-divvy-tripdata.csv")


#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
colnames(m1_2021)
colnames(m2_2021)
colnames(m3_2021)
colnames(m4_2020)
colnames(m5_2020)
colnames(m6_2020)
colnames(m7_2020)
colnames(m8_2020)
colnames(m9_2020)
colnames(m10_2020)
colnames(m11_2020)
colnames(M12_2020)

# Rename columns  to make them consisent with q1_2020 (as this will be the supposed going-forward table design for Divvy)
# Don't think this is necessary with the most recent data as of 4.17.2021

(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))

# Inspect the dataframes and look for inconguencies
str(m1_2021)
str(m2_2021)
str(m3_2021)
str(m4_2020)
str(m5_2020)
str(m6_2020)
str(m7_2020)
str(m8_2020)
str(m9_2020)
str(m10_2020)
str(m11_2020)
str(M12_2020)

# Convert ride_id and rideable_type to character so that they can stack correctly

m1_2021 <-  mutate(m1_2021, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m2_2021 <-  mutate(m2_2021, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m3_2021 <-  mutate(m3_2021, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m4_2020 <-  mutate(m4_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m5_2020 <-  mutate(m5_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m6_2020 <-  mutate(m6_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type))
m7_2020 <-  mutate(m7_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m8_2020 <-  mutate(m8_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m9_2020 <-  mutate(m9_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type))
m10_2020 <-  mutate(m10_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m11_2020 <-  mutate(m11_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
m12_2020 <-  mutate(M12_2020, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type))



# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(m1_2021, m2_2021, m3_2021, m4_2020, m5_2020, m6_2020, m7_2020, m8_2020,
                       m9_2020, m10_2020, m11_2020, m12_2020)

# Got an error since it looks like a couple columns are not matching. Running a different mutate script.
# Here making all start_station_id = col_double(), and end_station_id = col_double(), some have it as character

m1_2021 <-  mutate(m1_2021, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m2_2021 <-  mutate(m2_2021, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m3_2021 <-  mutate(m3_2021, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m4_2020 <-  mutate(m4_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id))  
m5_2020 <-  mutate(m5_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id))  
m6_2020 <-  mutate(m6_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m7_2020 <-  mutate(m7_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m8_2020 <-  mutate(m8_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m9_2020 <-  mutate(m9_2020, start_station_id = as.double(start_station_id)
                   ,end_station_id = as.double(end_station_id)) 
m10_2020 <-  mutate(m10_2020, start_station_id = as.double(start_station_id)
                    ,end_station_id = as.double(end_station_id))  
m11_2020 <-  mutate(m11_2020, start_station_id = as.double(start_station_id)
                    ,end_station_id = as.double(end_station_id))  
m12_2020 <-  mutate(M12_2020, start_station_id = as.double(start_station_id)
                    ,end_station_id = as.double(end_station_id)) 


#kicked some errors out, trying the bind again

all_trips <- bind_rows(m1_2021, m2_2021, m3_2021, m4_2020, m5_2020, m6_2020, m7_2020, m8_2020,
                       m9_2020, m10_2020, m11_2020, m12_2020)

#looks like it worked!



# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020 (Think this is also obsolete)
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================
# Inspect the new table that has been created
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(qs_raw)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

# There are a few problems we will need to fix:
# (1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). We will need to consolidate that from four to two labels.
# (2) The data can only be aggregated at the ride-level, which is too granular. We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.
# (3) We will want to add a calculated field for length of ride since the 2020Q1 data did not have the "tripduration" column. We will add "ride_length" to the entire dataframe for consistency.
# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.

# In the "member_casual" column, replace "Subscriber" with "member" and "Customer" with "casual"
# Before 2020, Divvy used different labels for these two types of riders ... we will want to make our dataframe consistent with their current nomenclature
# N.B.: "Level" is a special property of a column that is retained even if a subset does not contain any values from a specific level
# Begin by seeing how many observations fall under each usertype
table(all_trips$member_casual)

# Reassign to the desired values (we will go with the current 2020 labels) Also Obsolete, but will run
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned
table(all_trips$member_casual)

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
# https://www.statmethods.net/input/dates.html more on date formats in R found at that link
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds)
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

# Inspect the structure of the columns
str(all_trips)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed
# https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride

# You can condense the four lines above to one line using summary() on the specific attribute
#somehow the summary stats below works but the ones above kicked out NA

summary(all_trips_v2$ride_length)

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

#seeing the same pattern I did when I looked at the pivot tables - much longer rides for casual users

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts

# Let's visualize the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")

# Let's create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")

#=================================================
# STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS
#=================================================
# Create a csv file that we will visualize in Excel, Tableau, or my presentation software
# N.B.: This file location is for a Mac. If you are working on a PC, change the file location accordingly (most likely "C:\Users\YOUR_USERNAME\Desktop\...") to export the data. You can read more here: https://datatofish.com/export-dataframe-to-csv-in-r/
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = 'C:/Users/jedga/Desktop/Capstone/avg_ride_length.csv')

#You're done! Congratulations!
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──

✔ ggplot2 3.3.3     ✔ purrr   0.3.4
✔ tibble  3.1.0     ✔ dplyr   1.0.5
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0

── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()


Attaching package: ‘lubridate’


The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union


'/kaggle/working'
Error in setwd("/Users/jedga/Desktop/Capstone/Excel_files"): cannot change working directory
Traceback:

1. setwd("/Users/jedga/Desktop/Capstone/Excel_files")
